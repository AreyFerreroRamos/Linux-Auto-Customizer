########################################################################################################################
# - Name: .tmux.conf                                                                                                   #
# - Description: Miscellaneous configuration of tmux using tmux conf syntax.                                           #
# - Creation Date: 11/12/21                                                                                            #
# - Last Modified: 11/12/21                                                                                            #
# - Author & Maintainer: Aleix Mariné-Tena                                                                             #
# - Email: aleix.marine@estudiants.urv.cat                                                                             #
# - Permissions: This script can not be executed directly, only sourced to import its functions and process its own    #
# imports. See the header of each function to see its privilege requirements.                                          #
# - Arguments: No arguments                                                                                            #
# - Usage: Not executed directly, sourced from install.sh                                                              #
# - License: GPL v2.0                                                                                                  #
########################################################################################################################

# tmux resolvable symbols:
# - #S  Shows the session number
# - #P  Shows the pane number
# - #T  Machine name
# - #W  Last directory in the pwd
# - #{pane_current_command}  Shows the command that is being currently run in the shell
# - #{pane_index}  Pane number
# - #{pane_current_path}  Current path of the pane
# - #(whoami)  Shows the current user.

########################################################################################################################
###################################################### VARIABLES #######################################################
########################################################################################################################

# preset colours
CYAN='colour45'
GREEN='colour34'
LIGHT_GREEN='colour154'
ORANGE='colour208'
PINK='colour165'
PURPLE='colour91'
RED='colour160'
YELLOW='colour11'
DARK_GREY='colour233'
GREY='colour236'
LIGHT_GREY='colour238'
BLUE='colour31'
BLACK='colour0'
WHITE='colour252'

# Semantic colours
DEFAULT=default
BACKGROUND_COLOR_PRIMARY=$GREY
BACKGROUND_COLOR_SECONDARY=default
FOREGROUND_COLOR_PRIMARY=$WHITE
FOREGROUND_COLOR_SECONDARY=$PINK
TAB_COLOR_PRIMARY=$YELLOW
TAB_COLOR_SECONDARY=$BLUE
ACTIVITY_MESSAGES=$GREEN
CONTRAST_COLOR=$LIGHT_GREEN
BACKGROUND_GENERAL_MESSAGES=$BLACK
FOREGROUND_GENERAL_MESSAGES=$CYAN
STATIC_INFO=$ORANGE
STATUS_BARS=$LIGHT_GREY

# UI formats
# Note: Use "" and not '' when defining or declaring variables, since the later ones avoid variable expansion
# Status tab format for all tabs
ALL_STATUS_WINDOW="#[fg=$TAB_COLOR_SECONDARY,none,bg=$BACKGROUND_COLOR_SECONDARY][#W]"
# Status tab format for the current opened tab
CURRENT_STATUS_WINDOW="#[fg=$TAB_COLOR_PRIMARY,bold,bg=$BACKGROUND_COLOR_PRIMARY][#W]"
# Status pane format for all panes
ALL_PANE_STATUS="#P: #{pane_current_command}"
# Status bar left format
STATUS_LEFT="#[fg=$CONTRAST_COLOR,bg=$STATUS_BARS]#S #[fg=$STATIC_INFO]#{pane_current_command} "
# Status bar right format
STATUS_RIGHT="#[fg=$STATIC_INFO,bg=$STATUS_BARS] #(whoami) #(bash €{CURRENT_INSTALLATION_FOLDER}/clockmoji.sh) "
# Terminal window title format
TERMINAL_WINDOW_TITLE='tmux - #T - Session: #S Pane: #P'


########################################################################################################################
###################################################### INTERFACES ######################################################
########################################################################################################################
# This allows the use of the mouse to manipulate the panes and windows of tmux. This is equivalent to:
#set -g mouse-select-window on  # Clickable windows
#set -g mouse-select-pane on  # Clickable panes
#set -g mouse-resize-pane on  # Resizable panes
# Controlled by a binding and by default is disabled
#set -g mouse on
# Ctrl Scroll to Zoom
#{
# Ctrl + WheelUp zoom in
#bind -T root C-WheelUpPane "run-shell \"xdotool key Ctrl+plus\""
# Ctrl + WheelDown zoom out
#bind -T root C-WheelDownPane "run-shell \"xdotool key Ctrl+minus\""
# Ctrl + WheelClick restore default zoom
#bind -T root C-MouseDown2Pane "run-shell \"xdotool key Ctrl+0\""
#}


# Sets the system variable $TERM
set -g default-terminal "screen-256color"

# Drag tabs in status bar to re-order tabs
bind -n MouseDrag1Status swap-window -t=

# Double click on the window list to open a new window
bind -n DoubleClick1Status new-window

##### Clipboard integration #####
# This integration has to be bidirectional: Copied to tmux buffer should go to tmux buffer and also system buffer.
# Paste option from the right click drop down menu should paste from system, and special shortcut should paste from
# tmux buffer.
#{
# Selection with mouse should copy to clipboard right away, in addition to the default action.
#unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
#bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-selection\; run "tmux save-buffer - | xclip -i -sel clipboard > /dev/null"

# Update default binding of Enter to also use copy-pipe
#unbind -T copy-mode-vi Enter
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"
#bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

#unbind MouseDown2Pane
#bind -n MouseDown2Pane run "tmux set-buffer -- \"$(xclip -o -sel primary);\"; tmux paste-buffer -p"

# ctrl+c to send to clipboard
# bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"

# ctrl+v to paste from clipboard
# bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

#}









########################################################################################################################
###################################################### BEHAVIOUR #######################################################
########################################################################################################################

# https://github.com/neovim/neovim/issues/2035
# Time passed for the keyboard device to recognize an escape sequence. By default is set to 500 ms which makes tmux
# misinterpret an actual press of the ESC key with an escape sequence.
# ESC delay after prefix (ms)
set -sg escape-time 10

# By default tmux will update the window title automatically depending on the last executed command within that window.
# In order to prevent tmux from overriding window names automatic renaming is turned off. You can turn it on by
# commenting the following lines and commenting out the other.
set -g allow-rename on
setw -g automatic-rename
set -g automatic-rename-format '#{b:pane_current_path}'
#set -g allow-rename off

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
# Useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# Sane scrolling
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Start numbering sessions and panes on 1
set -g base-index 1
setw -g pane-base-index 1

# Be able to receive focus events enabled for terminals that support them. Necessary (?)
set -g focus-events on

# Track if there is new output in windows
setw -g monitor-activity on

# Show message when output is received in a non-active window
set -g visual-activity on



########################################################################################################################
###################################################### BINDINGS ########################################################
########################################################################################################################

# C-b is not acceptable -- Vim uses it
set -g prefix C-a
bind C-a last-window
bind a send-prefix

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Inverts mouse mode value
#bind y run "[[ \"\$(tmux show -gv mou)\" = *n* ]] && tmux set -g mou on || tmux set -g mou off; tmux display-message \"mouse mode: \$(tmux show -gv mou)\""

# Bind y to set mouse off
bind g run "sed \"s/^set -g mouse on\$//g\" -i \"€{HOME_FOLDER}/.tmux.conf\"; tmux source-file \"€{HOME_FOLDER}/.tmux.conf\""
# Bind g to set mouse on
bind y run "if ! grep -qE \"^set -g mouse on\\\$\" \"€{HOME_FOLDER}/.tmux.conf\"; then echo \"set -g mouse on\" >> \"€{HOME_FOLDER}/.tmux.conf\"; fi"

# hjkl pane traversal
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize pane
bind -r K resize-pane -U
bind -r J resize-pane -D
bind -r L resize-pane -R
bind -r H resize-pane -L
bind    m resize-pane -Z

# split panes using | and -
bind | split-window -h -p 50
bind - split-window -v -p 50
unbind '"'
unbind %

bind c new-window -c "#{pane_current_path}"
bind i command-prompt -p 'Insert window at:' 'new-window -c "#{pane_current_path}" -a -t %1; swap-window -t -1'
bind I command-prompt -p 'New window at:' 'new-window -c "#{pane_current_path}" -t %1'
bind C command-prompt -p "Name of new window: " "new-window -n '%%'"

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."









########################################################################################################################
############################################################ UI ########################################################
########################################################################################################################

# Windows
#{


setw -g window-status-current-format $ALL_STATUS_WINDOW
setw -g window-status-format $ALL_STATUS_WINDOW

# Status tab format for the active tab, effect of being clicked
set -g window-status-current-format $CURRENT_STATUS_WINDOW

# Default status tab for all tabs,
setw -g window-status-style bg=$BACKGROUND_COLOR_SECONDARY

# active window title colors
setw -g window-status-current-style fg=$ACTIVITY_MESSAGES,bg=$BACKGROUND_COLOR_PRIMARY
setw -g window-status-activity-style fg=$ACTIVITY_MESSAGES,bg=$BACKGROUND_COLOR_SECONDARY,none

# Default color of window (pane), fg for pane text and bg for pane background
set -g window-style bg=$BACKGROUND_COLOR_SECONDARY

# Default color of currently active window (pane), fg for pane text and bg for pane background
set -g window-active-style bg=$BACKGROUND_COLOR_PRIMARY
#}


# Panes
#{
# Pane border colour for the active pane
set -g pane-active-border-style fg=$TAB_COLOR_PRIMARY,bg=$BACKGROUND_COLOR_PRIMARY

# Pane border for all the non-focused panes, with default (transparent) background
set -g pane-border-style fg=$TAB_COLOR_SECONDARY,bg=$BACKGROUND_COLOR_SECONDARY

# Put the status border of the pane at the top
set -g pane-border-status top

# Show the pane number and the command running on the status border of a pane
set -g pane-border-format $ALL_PANE_STATUS

#}



# Status bar
#{
set -g status 'on'

# redraw status line every 1 second
set -g status-interval 1

# Activate it to change the position of the status bar
set -g status-position bottom

# Activate it to put the text of the status bar in the center
set -g status-justify 'centre'

# Default color of text background in the status bar is the default, which usually is the transparent inherited from system
set -g status-bg $BACKGROUND_COLOR_SECONDARY

# Override default color of text in the status bar
#set -g status-fg $GREEN

# Set the contents of the two status bars
set -g status-left $STATUS_LEFT
set -g status-right $STATUS_RIGHT


#}

# Other
#{
# Colorize general and activity messages in the command line

set -g message-command-style fg=$BACKGROUND_GENERAL_MESSAGES,bg=$FOREGROUND_GENERAL_MESSAGES
set -g message-style fg=$BACKGROUND_GENERAL_MESSAGES,bg=$FOREGROUND_GENERAL_MESSAGES

# clock
setw -g clock-mode-colour $ACTIVITY_MESSAGES

# Set the terminal window title
set -g set-titles on
set -g set-titles-string $TERMINAL_WINDOW_TITLE
#}
